# This is Git's per-user configuration file.
#
# `git config --global` -> ~/.gitconfig
# `git config --system` -> $(prefix)/etc/gitconfig
#
# Update Git CLI
# ---
# win: git update-git-for-windows
# nix: git update
#
# See all config options
# ---
# `git help -c`

# Cannot override git commands, must create new alias.
# Use exclamation at beginning of line if command includes git
[alias]
    ; Push/Pull
    newpush = push origin -u
    mpush = push origin -u master
    fpush = push origin --force-with-lease
    pullrb = pull --rebase

    ; Changes
    undo = reset HEAD^
    cm = commit -m
    nopre = commit --no-verify -m
    rebno = commit --amend --no-verify
    peek = show -p  # peek contents of last commit
    dd = diff develop
    dm = diff master
    dzero = diff -U0

    ; Log
    branchlog = cherry -v develop # { mybranch }

    ; Staged
    all = !git add -u && git add .
    addchunk = git add -u -p

    ; Unstaged
    rmunstaged = checkout .

    ; List
    rso = remote show origin
    lsf = !git ls-files | grep --color -i
    v = remote -v
    vv = branch -vv # see upstream branches in third column

    ; Branch
    create = checkout --track -b

    ; Cleanup
    rpo = remote prune origin
    odelete = push origin --delete

    ; Stash
    stashun = stash --include-untracked
    speek = stash show -p   # peek contents of latest stash
    schunk = checkout -p stash@{0}

    ; Change History
    altrebase = !git fetch && git rebase -i origin/develop
    altrebasemaster = !git fetch && git rebase -i origin/master
    combine = -i --onto # feature1 feature1 feature2
                        # ^ the branch to end up with
                        # ---------^ branch to combine 1
                        # ------------------^ branch to combine 2

# Colors
# -----------------------------------------------------------------------------------------------------
[color]
    branch = auto
    interactive = auto
    diff = auto
    status = auto
        showbranch = auto
    ui = true

# color.branch
#     A boolean to enable/disable color in the output of git-branch(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.interactive
#     When set to always, always use colors for interactive prompts and displays (such as those used by
#     "git-add --interactive"). When false (or never), never. When set to true or auto, use colors only
#     when the output is to the terminal. Defaults to false.

# color.diff
#     Whether to use ANSI escape sequences to add color to patches. If this is set to always, git-
#     diff(1), git-log(1), and git-show(1) will use color for all patches. If it is set to true or
#     auto, those commands will only use color when output is to the terminal. Defaults to false.

#     This does not affect git-format-patch(1) nor the git-diff-* plumbing commands. Can be overridden
#     on the command line with the --color[=<when>] option.

# color.pager
#     A boolean to enable/disable colored output when the pager is in use (default is true).

# color.showbranch
#     A boolean to enable/disable color in the output of git-show-branch(1). May be set to always,
#     false (or never) or auto (or true), in which case colors are used only when the output is to a
#     terminal. Defaults to false.

# color.status
#     A boolean to enable/disable color in the output of git-status(1). May be set to always, false (or
#     never) or auto (or true), in which case colors are used only when the output is to a terminal.
#     Defaults to false.

# color.ui
#     This variable determines the default value for variables such as color.diff and color.grep that
#     control the use of color per command family. Its scope will expand as more commands learn
#     configuration to set a default for the --color option. Set it to always if you want all output
#     not intended for machine consumption to use color, to true or auto if you want such output to use
#     color when written to the terminal, or to false or never if you prefer git commands not to use
#     color unless enabled explicitly with some other configuration or the --color option.

# color.branch.<slot>
#     Use customized color for branch coloration.  <slot> is one of current (the current branch), local
#     (a local branch), remote (a remote-tracking branch in refs/remotes/), plain (other refs).

#     The value for these configuration variables is a list of colors (at most two) and attributes (at
#     most one), separated by spaces. The colors accepted are:
#       normal, black, red, green, yellow, blue, magenta, cyan and white;
#     the attributes are:
#       bold, dim, ul, blink and reverse.
#
#     The first color given is the foreground; the second is the background.
#     The position of the attribute, if any, doesn't matter.
[color "branch"]
    #current = green # default value
    #local = white # default value
    #remote = red # default value
    current = green reverse
    local = green
    remote = yellow

# color.diff.<slot>
#     Use customized color for diff colorization.  <slot> specifies which part of the patch to use the
#     specified color, and is one of plain (context text), meta (metainformation), frag (hunk header),
#     func (function in hunk header), old (removed lines), new (added lines), commit (commit headers),
#     or whitespace (highlighting whitespace errors). The values of these variables may be specified as
#     in color.branch.<slot>.
[color "diff"]
    # Note: White turns to a gray color, use normal to achieve white.

    #plain = normal # default
    #meta = normal bold # default
    #frag = cyan # default
    #old = red # default
    #new = green # default
    #commit = normal # default
    #whitespace = red reverse # default
    plain = white # code around the code changes
    meta = normal
    frag = magenta
    func = magenta
    old = red bold
    new = green bold
    commit = red
    whitespace = red reverse

# color.decorate.<slot>
#     Use customized color for git log --decorate output.  <slot> is one of branch, remoteBranch, tag,
#     stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively.
[color "decorate"]

# color.interactive.<slot>
#     Use customized color for git add --interactive output.  <slot> may be prompt, header, help or
#     error, for four distinct types of normal output from interactive commands. The values of these
#     variables may be specified as in color.branch.<slot>.

# color.status.<slot>
#     Use customized color for status colorization.  <slot> is one of header (the header text of the
#     status message), added or updated (files which are added but not committed), changed (files which
#     are changed but not added in the index), untracked (files which are not tracked by git), branch
#     (the current branch), or nobranch (the color the no branch warning is shown in, defaulting to
#     red). The values of these variables may be specified as in color.branch.<slot>.
[color "status"]
    #header = normal # default
    #added = green # default
    #changed = red # default
    #untracked = red # default
    #branch = normal # default
    #nobranch = red # default
    header = normal
    added = green bold
    changed = red bold
    untracked = red
    branch = normal bold
    nobranch = yellow bold
# -----------------------------------------------------------------------------------------------------

[filter "lfs"]
    required = true
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f

[user] # Please adapt and uncomment the following lines:
	name = Christian Hall
    email = chall@incytestudios.com
    #signingKey = 

    # SSL
	#sslcalinfo = /etc/ssl/certs/ca-certificates.crt

[init]
    defaultBranch = master

[core]
    editor = 'vim'
    excludesFile = ~/.gitignore # global ignore file
    #commentChar = '#'
    longpaths = true
    symlinks = true # false means: fill in symlinks files with linked text

    #bigFileThreshold = 512m # default
    #sharedRepository = christian # share repo files among group

    autocrlf = false # true means: CRLF in working directory, and LF in repository.
    safecrlf = false
    eol = lf
    whitespace = blank-at-eol, blank-at-eof, \
        tab-in-indent, \
        -space-before-tab, \
        -indent-with-non-tab, \

#https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/checking-for-existing-gpg-keys
[commit]
    #gpgSign = true

[push]
    #default = simple

[branch]
    #autoSetupMerge = always    # will set upstream to source branch
    #autoSetupRebase = always   # git pull will always now do a rebase

[submodule]

[hooks]
    #allownonascii = true # default: false, don't allow non-ASCII filenames

[diff]
    #tool = vimdiff

[credential]
    helper = cache --timeout 7200 # Only need to put in password every 2 hours

[advice]
    #fetchShowForcedUpdates = false
    #pushUpdateRejected = false
    #pushNonFFCurrent = false
    #pushNonFFMatching = false
    #pushAlreadyExists = false
    #pushFetchFirst = false
    #pushNeedsForce = false
    #pushUnqualifiedRefname = false
    #statusAheadBehind = false
    #statusHints = false
    #statusUoption = false
    #commitBeforeMerge = false
    #resetQuiet = false
    #resolveConflict = false
    #sequencerInUse = false
    #implicitIdentity = false
    #detachedHead = false
    #checkoutAmiguousRemoteBranchName = false
    #amWorkDir = false
    #rmHints = false
    #addEmbeddedRepo = false
    #ignoredHook = false
    #waitingForEditor = false
    #nestedTag = false
    #submoduleAlternateErrorStategyDie = false
    #skippedCherryPicks = false
[safe]
	directory = /home/christian/bin/summit-knowledge-integration/src/login-service-backend
